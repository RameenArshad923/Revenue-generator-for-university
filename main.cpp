#include <iostream>
#include <fstream>
#include <string>

using namespace std;

// Base class for all employees
class Employee {
protected:
    string name;
public:
    virtual double calculateSalary() const = 0;
    virtual bool isTeacher() const { return false; }

    // Overloading << operator to print employee details
    friend ostream& operator<<(ostream& os, const Employee& emp) {
        emp.print();
        return os;
    }

    virtual void print() const {
        cout << "Name: " << name << endl;
    }

    
};

// Derived class for teachers
class Teacher : public Employee {
private:
    char rank;
public:
    Teacher(char r) : rank(r) {}

    double calculateSalary() const  {
        // Implement salary calculation for teachers based on rank
        double baseSalary = 0;
        switch (rank) {
            case 'A':
                baseSalary = 70000;
                break;
            case 'B':
                baseSalary = 60000;
                break;
            case 'C':
                baseSalary = 50000;
                break;
            default:
                cout << "Invalid rank for teacher!" << endl;
                return 0;
        }
        return baseSalary;
    }

    bool isTeacher() const { return true; }

    void print() const {
        cout << "Teacher: " << name << ", Rank: " << rank << endl;
    }

    // Function to save teacher details to a file
    void saveToFile(ofstream& outFile) const {
        outFile << "Teacher: " << name << ", Rank: " << rank << endl;
    }
};

// Derived class for staff
class Staff : public Employee {
private:
    char rank;
public:
    Staff(char r) : rank(r) {}

    double calculateSalary() const  {
        // Implement salary calculation for staff based on rank
        double baseSalary = 0;
        switch (rank) {
            case 'A':
                baseSalary = 50000;
                break;
            case 'B':
                baseSalary = 40000;
                break;
            case 'C':
                baseSalary = 30000;
                break;
            default:
                cout << "Invalid rank for staff!" << endl;
                return 0;
        }
        return baseSalary;
    }

    void print() const  {
        cout << "Staff: " << name << ", Rank: " << rank << endl;
    }

    // Function to save staff details to a file
    void saveToFile(ofstream& outFile) const {
        outFile << "Staff: " << name << ", Rank: " << rank << endl;
    }
};

// Class representing a university department
class Department {
private:
    string name;
    int numberOfStudents;
    double feesPerStudent;
public:
    Department(const string& n, int num, double fees)
        : name(n), numberOfStudents(num), feesPerStudent(fees) {}

    // Calculate revenue generated by the department
    double calculateRevenue() const {
        return numberOfStudents * feesPerStudent;
    }

    // Function to save department details to a file
    void saveToFile(ofstream& outFile) const {
        outFile << "Department Name: " << name << endl;
        outFile << "Number of Students: " << numberOfStudents << endl;
        outFile << "Fees Per Student: " << feesPerStudent << endl;
    }
};

// University class
class University {
private:
    Department** departments;
    int numDepartments;
    double previousYearRevenue;
    double budget;
    double governmentFunding; // Added for government funding
    Employee** employees;
    int numEmployees;
public:
    University(int numDep, double prevRev) : numDepartments(numDep), previousYearRevenue(prevRev), numEmployees(0), governmentFunding(0) {
        departments = new Department*[numDepartments];
        employees = new Employee*[100]; // Assuming a maximum of 100 employees for simplicity
    }

    // Function to add a department
    void addDepartment(const Department& dept) {
        departments[numDepartments++] = new Department(dept);
    }

    // Function to add departments based on user input
    void addDepartments(int num) {
        for (int i = 0; i < num; ++i) {
            cout << "\nEnter details for department " << i + 1 << ":" << endl;
            addDepartment(getDepartmentDetails());
        }
    }

    // Function to add employees
    void addEmployees() {
        int numTeachers, numStaff;
        char rank;
        
        cout << "\nEnter the number of teachers: ";
        cin >> numTeachers;
        for (int i = 0; i < numTeachers; ++i) {
            cout << "Enter rank (A, B, or C) for teacher " << i + 1 << ": ";
            cin >> rank;
            addEmployee(new Teacher(rank));
        }

        cout << "Enter the number of staff members: ";
        cin >> numStaff;
        for (int i = 0; i < numStaff; ++i) {
            cout << "Enter rank (A, B, or C) for staff member " << i + 1 << ": ";
            cin >> rank;
            addEmployee(new Staff(rank));
        }
    }

    // Function to add an employee
    void addEmployee(Employee* emp) {
        employees[numEmployees++] = emp;
    }

    // Function to calculate total budget
    double calculateTotalBudget() {
        budget = 0;
        for (int i = 0; i < numDepartments; ++i) {
            budget += departments[i]->calculateRevenue();
        }
        budget += governmentFunding; // Add government funding to the budget
        return budget;
    }

    // Function to divide the budget into different parts
    void divideBudget() {
        double teacherBudget = budget * 0.5;
        double staffBudget = budget * 0.4;
        double otherBudget = budget * 0.1;

        cout << "Budget Allocation:" << endl;
        cout << "Teachers' Salaries: $" << teacherBudget << endl;
        cout << "Other Staff Salaries: $" << staffBudget << endl;
        cout << "Renovation, Co-curricular Activities, Sports, and Events: $" << otherBudget << endl;
    }

    // Function to compare revenue with the previous year
    void compareRevenue() {
        if (budget >= previousYearRevenue) {
            cout << "The current year's revenue is greater than or equal to the previous year." << endl;
        } else {
            cout << "The current year's revenue is less than the previous year." << endl;
        }
    }

    // Function to calculate rent dues
    void calculateRentDues() {
        int numHostelStudents, numDayScholars;
        cout << "\nEnter the number of hostel students: ";
        cin >> numHostelStudents;
        cout << "Enter the number of day scholars: ";
        cin >> numDayScholars;

        double hostelCharges = numHostelStudents * 50000; // Hostel charges per student per semester
        double transportCharges = numDayScholars * 5000 * 6; // Transport charges for day scholars per month, considering a semester of 6 months
        double messCharges = numHostelStudents * 40000; // Mess charges per student per semester
        double commission = (hostelCharges + transportCharges + messCharges) * 0.4; // 40% commission or rent to university

        cout << "\nRent Dues Calculation:" << endl;
        cout << "Hostel Charges: $" << hostelCharges << endl;
        cout << "Transport Charges for Day Scholars: $" << transportCharges << endl;
        cout << "Mess Charges: $" << messCharges << endl;
        cout << "Commission or Rent to University: $" << commission << endl;
    }

    // Function to add government funding
    void addGovernmentFunding() {
        cout << "\nIs the university government-controlled? (1 for yes, 0 for no): ";
        int isGovernmentControlled;
        cin >> isGovernmentControlled;
        
        if (isGovernmentControlled == 1) {
            cout << "\nEnter the amount of government funding: $";
            cin >> governmentFunding;
        } else {
            cout << "\nNo government funding available (Private University)." << endl;
            // Assuming a default value of 0 for government funding in private universities
            governmentFunding = 0;
            // Exit the function if the university is not government-controlled
            return;
        }
    }

    // Function to display menu
    void displayMenu() {
        cout << "\nUniversity Management System Menu:" << endl;
        cout << "1. Add Department(s)" << endl;
        cout << "2. Add Teachers and Staff" << endl;
        cout << "3. Add Government Funding" << endl; // Added option for government funding
        cout << "4. Total Budget" << endl; // Added option for total budget
        cout << "5. Calculate Teachers' Salaries" << endl;
        cout << "6. Calculate Staff Salaries" << endl;
        cout << "7. Divide Budget" << endl;
        cout << "8. Compare Revenue" << endl;
        cout << "9. Calculate Rent Dues" << endl;
        cout << "10. Save University Data to File" << endl; // Added option to save data to a file
        cout << "11. Exit" << endl;
    }

    // Function to handle user input
    void handleInput(int choice) {
        switch (choice) {
            case 1:
                int numDepartmentsToAdd;
                cout << "\nEnter the number of departments to add: ";
                cin >> numDepartmentsToAdd;
                addDepartments(numDepartmentsToAdd);
                break;
            case 2:
                addEmployees();
                break;
            case 3:
                addGovernmentFunding();
                break;
            case 4:
                displayTotalBudget();
                break;
            case 5:
                calculateTeachersSalaries();
                break;
            case 6:
                calculateStaffSalaries();
                break;
            case 7:
                divideBudget();
                break;
            case 8:
                compareRevenue();
                break;
            case 9:
                calculateRentDues();
                break;
            case 10:
                saveDataToFile();
                break;
            case 11:
                cout << "Exiting... Thank you!" << endl;
                break;
            default:
                cout << "Invalid choice! Please try again." << endl;
        }
    }

    // Function to calculate teachers' salaries
    void calculateTeachersSalaries() {
        cout << "\nCalculating Teachers' Salaries:" << endl;
        for (int i = 0; i < numEmployees; ++i) {
            if (employees[i]->isTeacher()) {
                cout << *employees[i] << " Salary: $" << employees[i]->calculateSalary() << endl;
            }
        }
    }

    // Function to calculate staff salaries
    void calculateStaffSalaries() {
        cout << "\nCalculating Staff Salaries:" << endl;
        for (int i = 0; i < numEmployees; ++i) {
            if (!employees[i]->isTeacher()) {
                cout << *employees[i] << " Salary: $" << employees[i]->calculateSalary() << endl;
            }
        }
    }

    // Function to get department details from user
    Department getDepartmentDetails() {
        string name;
        int numStudents;
        double feesPerStudent;

        cout << "Enter department name: ";
        cin >> name;
        cout << "Enter number of students: ";
        cin >> numStudents;
        cout << "Enter fees per student: $";
        cin >> feesPerStudent;

        return Department(name, numStudents, feesPerStudent);
    }

    // Function to display total budget
    void displayTotalBudget() {
        double totalBudget = calculateTotalBudget();
        cout << "\nTotal Budget: $" << totalBudget << endl;
    }

    // Function to save university data to a file
   void saveDataToFile() {
    ofstream outFile("university_data.txt");
    if (outFile.is_open()) {
        // Write department data to file
        outFile << "Department Data:\n";
        for (int i = 0; i < numDepartments; ++i) {
            departments[i]->saveToFile(outFile);
        }

        

        // Write budget data to file
        outFile << "\nBudget Data:\n";
        outFile << "Previous Year Revenue: $" << previousYearRevenue << endl;
        outFile << "Total Budget: $" << budget << endl;
        outFile << "Government Funding: $" << governmentFunding << endl;

        outFile.close();
        cout << "University data saved to university_data.txt successfully." << endl;
    } else {
        cout << "Unable to open file to save university data." << endl;
    }
}

    // Destructor to release memory
    ~University() {
        for (int i = 0; i < numDepartments; ++i) {
            delete departments[i];
        }
        delete[] departments;
        for (int i = 0; i < numEmployees; ++i) {
            delete employees[i];
        }
        delete[] employees;
    }
};

int main() {
    int numDepartments;
    double previousYearRevenue;

    cout << "Enter the number of departments: ";
    cin >> numDepartments;

    cout << "Enter the revenue from the previous year: $";
    cin >> previousYearRevenue;

    // Create university object
    University university(numDepartments, previousYearRevenue);

    int choice;
    do {
        university.displayMenu();
        cout << "\nEnter your choice: ";
        cin >> choice;
        university.handleInput(choice);
    } while (choice != 11);

    return 0;
}
